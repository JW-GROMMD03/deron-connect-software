
import os
import logging
import uuid
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
import pymysql
import paramiko

app = Flask(__name__)
CORS(app, origins=["https://deronconnectpay.com"])  # Allow frontend requests

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Database Configuration (Using Environment Variables)
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_USER = os.getenv('DB_USER', 'root')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_NAME = os.getenv('DB_NAME', 'wifi_payments')

# Ensure database connection is established
try:
    db = pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME, autocommit=True)
    cursor = db.cursor()
except pymysql.MySQLError as e:
    logging.error(f"Database connection error: {e}")
    raise

# SSH Configuration for Router Access
ROUTER_IP = os.getenv('ROUTER_IP')
SSH_USER = os.getenv('SSH_USER')
SSH_PASSWORD = os.getenv('SSH_PASSWORD')

# M-Pesa C2B API Configuration (Live Mode)
MPESA_C2B_URL = "https://api.safaricom.co.ke/mpesa/c2b/v1/registerurl"
MPESA_VALIDATE_URL = os.getenv('MPESA_VALIDATE_URL')
MPESA_CONFIRM_URL = os.getenv('MPESA_CONFIRM_URL')
MPESA_SHORTCODE = os.getenv('MPESA_SHORTCODE')
MPESA_CONSUMER_KEY = os.getenv('MPESA_CONSUMER_KEY')
MPESA_CONSUMER_SECRET = os.getenv('MPESA_CONSUMER_SECRET')

# Ensure sensitive credentials are set
if not all([MPESA_CONSUMER_KEY, MPESA_CONSUMER_SECRET, MPESA_SHORTCODE]):
    logging.error("M-Pesa credentials must be set as environment variables.")
    raise ValueError("Missing M-Pesa credentials.")

def get_mpesa_token():
    try:
        url = "https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials"
        response = requests.get(url, auth=(MPESA_CONSUMER_KEY, MPESA_CONSUMER_SECRET))
        response.raise_for_status()
        return response.json().get("access_token", "")
    except requests.RequestException as e:
        logging.error(f"Error fetching M-Pesa token: {e}")
        return None

def register_mpesa_c2b():
    token = get_mpesa_token()
    if not token:
        logging.error("Failed to obtain M-Pesa token.")
        return
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {
        "ShortCode": MPESA_SHORTCODE,
        "ResponseType": "Completed",
        "ConfirmationURL": MPESA_CONFIRM_URL,
        "ValidationURL": MPESA_VALIDATE_URL
    }
    try:
        response = requests.post(MPESA_C2B_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"Error registering M-Pesa C2B: {e}")
        return None

def grant_wifi_access(unique_code):
    try:
        with paramiko.SSHClient() as ssh:
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(ROUTER_IP, username=SSH_USER, password=SSH_PASSWORD)
            command = f"grant_access {unique_code}"
            ssh.exec_command(command)
            logging.info(f"WiFi access granted for code: {unique_code}")
            return True
    except Exception as e:
        logging.error(f"SSH Error: {e}")
        return False

def generate_unique_code():
    return uuid.uuid4().hex[:8].upper()

@app.route('/api/mpesa-confirmation', methods=['POST'])
def mpesa_confirmation():
    try:
        data = request.json
        phone = data.get('MSISDN')
        amount = int(data.get('TransAmount', 0))
        transaction_id = data.get('TransID')
        valid_amounts = [10, 20, 60, 200, 220, 330, 550, 700]

        if amount not in valid_amounts:
            return jsonify({"ResultCode": 1, "ResultDesc": "Invalid amount."})

        unique_code = generate_unique_code()
        try:
            cursor.execute("INSERT INTO transactions (phone, unique_code, status, amount, transaction_id) VALUES (%s, %s, %s, %s, %s)",
                           (phone, unique_code, "paid", amount, transaction_id))
        except pymysql.MySQLError as e:
            logging.error(f"Database error: {e}")
            return jsonify({"ResultCode": 1, "ResultDesc": "Database error"})

        grant_wifi_access(unique_code)

        logging.info(f"Transaction successful: {transaction_id}, Amount: {amount}, Phone: {phone}")
        return jsonify({"ResultCode": 0, "ResultDesc": "Success", "UniqueCode": unique_code})
    except Exception as e:
        logging.error(f"Error in M-Pesa confirmation: {e}")
        return jsonify({"ResultCode": 1, "ResultDesc": "Server error"})

if __name__ == '__main__':
    try:
        register_mpesa_c2b()
        ssl_cert = 'cert.pem' if os.path.exists('cert.pem') else None
        ssl_key = 'key.pem' if os.path.exists('key.pem') else None
        ssl_context = (ssl_cert, ssl_key) if ssl_cert and ssl_key else None
        app.run(debug=False, host='0.0.0.0', port=int(os.getenv('PORT', 5000)), ssl_context=ssl_context)
    except Exception as e:
        logging.error(f"Error starting the server: {e}")
